#!/usr/bin/python3

#for building the socket
import socket

#for system level commands
import sys

#for doing an array in TCP checksum
import array 

#For establishing the packet structure
from struct import *

#for encoding
import base64
import binascii

#create a RAW socket
try: 
  s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
except socket.error as msg:
  print(msg)
  sys.exit()
  
packet = ' '

src_ip = '10.10.0.40'
dst_ip = '172.16.40.10'

###########################
## Build Packet Header ###
###########################

#let's add the IPv4 header information 
ip_ver_ihl = 69                           #this is putting the decimal conversion of 0x45 for Version and Internet Header Length
ip_tos = 0                                #This combines the DSCP and ECN fields
ip_len = 0                                #the kernel will fill in the actual length of the packet
ip_frag = 64                              #this sets fragmentation to off
ip_ttl = 64                               #this determines time to live of the packet when leaving the machine 
ip_proto = 6                              #this sets the IP protocol to 6 (TCP) so additional headers are required
ip_check = 0                              #the kernel will fill in the checksum for the packet 
ip_srcadd = socket.inet_aton(src_ip)      #inet_aton(string) will convert an IP address to a 32 bit binary number 
ip_dstadd = socket.inet_aton(dst_ip)      #inet_aton(string) will convert an IP address to a 32 bit binary number 

#Pack the header
ip_header = pack(!'BBHHHBBH4s4s', ip_ver_ihl, ip_tos, ip_len, ip_id, ip_frag, ip_ttl, ip_proto, ip_check, ip_srcadd, ip_dstadd)

#Build TCP header

tcp_src = 54321               #source port
tcp_dst = 1234                #destination port
tcp_seq = 90210               #sequence number 
tcp_ack_seq = 30905           #tcp ack sequence number
tcp_data_off = 5              #data offset specifying the size of tcp header * 4 which is 20
tcp_reserve = 0               #the 3 reserve bits + ns flag in the reserve field 
tcp_flags = 0                 #tcp flags field before the bits are turned on 
tcp_win = 65535               #maximum allowed window size reordered to network order (socket.htons is deprecated)
tcp_chk = 0                   #tcp checksum which will be calculated later on
tcp_urg_ptr = 0               #urgent pointer only if urg flag is set

#combine the left shifted 4 bit tcp offset and the reserve field
tcp_off_res=(tcp_data_off<<4) + tcp_reserve

#tcp flags by bit starting from left to right
tcp_fin = 0         #finished
tcp_syn = 1         #Synchronization 
tcp_rst = 0         #Reset
tcp_psh = 0         #Push
tcp_ack = 0         #Acknowledgement
tcp_urg = 0         #Urgent
tcp_ece = 0         #Explicit Congestion Notification echo 
tcp_cwr = 0         #congestion window reduced 

#Combine the tcp flags by left shifting the bits locations and additing the bits together 
tcp_flags = tcp_fin + (tcp_syn << 1) + (tcp_rst << 2) + (tcp_psh << 3) + (tcp_ack << 4) + (tcp_urg << 5) + (tcp_ece << 6) + (tcp_cwr << 7)

#Pack the header
tcp_hdr = pack(!'HHLLBBHHH', tcp_src, tcp_dst, tcp_seq, tcp_ack, tcp_seq, tcp_off_res, tcp_flags, tcp_win, tcp_chk, tcp_urg_ptr)

#Message

#your custom protocol fields or data, we are going to just insert data here
#Add your message where the "?" is
#you can encode various data encodings, base64 or binascii

message = b'last_name'
hidden_msg = binascii.hexlify(message)

############################
### Create Pseudo Header ###
############################

#after you create the tcp header, create the pseudo header for the tcp checksum
src_add = socket.inet_aton(src_ip)
src_dst = socket.inet_aton(dst_ip)

reserved = 0
protocol = socket.IPPROTO_TCP
tcp_len = len(tcp_hdr) + len(message)

#Pack the Pseudo header
ps_hdr = pack('!4s4sBBH', src_address, dst_address, reserved, protocol, tcp_length)
ps_hdr = ps_hdr + tcp_hdr + message

#Define the checksum function 
def checksum(data):
  if len(data) % 2 !=0:
    data +=b'\0'
  res = sum(array.array("H",data))
  res = (res >> 16) + (res & 0xffff)
  res += res >> 16
  return (-res) & 0xffff
  
tcp_chk = checksum(ps_hdr)

#Final TCP pack
#pack the tcp header to fill in the correct checksum - remember checksum is NOT in network byte order
tcp_hdr = pack('!HHLLBBH', tcp_src, tcp_dst, tcp_seq, tcp_ack_seq, tcp_off_res, tcp_flags, tcp_win) + pack('H', tcp_chk) + pack('!H', tcp_urg_ptr)

#combine all the headers and the user data
packet = ip_header + tcp_hdr + message

#s.connect((dst_ip, port))      #typically used for TCP
#s.send(packet)

#send the packet 
s.sendto(packet, (dst_ip, 0))







